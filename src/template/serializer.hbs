package packets

import (
    "bytes"
{{#if importBinaryPackage}}
    "encoding/binary"
{{/if}}
)

type {{model.pascalCaseName}}Serializer struct {
{{#each schemas as |schema|}}
    {{schema.camelCaseName}}DtoSerializer *{{schema.pascalCaseName}}DtoSerializer
{{/each}}
}

func New{{model.pascalCaseName}}Serializer() *{{model.pascalCaseName}}Serializer {
    return &{{model.pascalCaseName}}Serializer{
    {{#each schemas as |schema|}}
        New{{schema.pascalCaseName}}DtoSerializer(),
    {{/each}}
    }
}

func (r *{{model.pascalCaseName}}Serializer) Serialize({{model.camelCaseName}} *{{model.pascalCaseName}}, buffer *bytes.Buffer) {
{{#if isPacket}}
    _ = binary.Write(buffer, binary.LittleEndian, {{model.pascalCaseName}}Header)
{{/if}}
{{#each fields as | field |~}}
{{~#if field.isNumeric}}
    {{> serializer-numeric field model=../model}}
{{/if}}
{{~#if field.isVarchar}}
    {{> serializer-varchar field model=../model}}
{{/if}}
{{~#if field.isChar}}
    {{> serializer-char field model=../model}}
{{/if}}
{{~#if field.isObject}}
    {{> serializer-object field model=../model}}
{{/if}}
{{~#if field.isArray}}
    {{> serializer-array field model=../model}}
{{/if}}

{{/each}}
}
